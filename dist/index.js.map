{"version":3,"sources":["../src/actions/helloWorld.ts","../src/actions/sendSms.ts","../src/actions/index.ts","../src/index.ts"],"sourcesContent":["import {\r\n    ActionExample,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\n\r\nexport const helloWorldAction: Action = {\r\n    name: \"HelloWorld\",\r\n    similes: [\r\n        \"HELLO\"\r\n    ],\r\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => {\r\n        return true;\r\n    },\r\n    description:\r\n        \"send hellow world to user\",\r\n    handler: async (\r\n        _runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        _state: State,\r\n        _options:{[key:string]: unknown},\r\n        _callback: HandlerCallback,\r\n    ): Promise<boolean> => {\r\n\r\n        // you can call api here to do some stuff\r\n\r\n        const helloWorld = \"hello world from agent action!\";\r\n\r\n        const newState = await _runtime.updateRecentMessageState(\r\n            {\r\n                ..._state,\r\n                helloWorld,\r\n            }\r\n        );\r\n\r\n        _callback(\r\n            {\r\n                text: helloWorld,\r\n            }\r\n        );\r\n\r\n        return true;\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: { text: \"please say hello world\" },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: { text: \"\", action: \"HELLO_WORLD\" },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n","import {\r\n    ActionExample,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n    type Action,\r\n} from \"@elizaos/core\";\r\nimport twilio from 'twilio';\r\n\r\nexport const sendSmsAction: Action = {\r\n    name: \"SendSms\",\r\n    similes: [\r\n        \"SendSms\"\r\n    ],\r\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => {\r\n        return true;\r\n    },\r\n    description:\r\n        \"Send SMS to the mobile number provided by the user\",\r\n    handler: async (\r\n        _runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        _state: State,\r\n        _options:{[key:string]: unknown},\r\n        _callback: HandlerCallback,\r\n    ): Promise<boolean> => {\r\n        // Check if environment variables are set\r\n        const accountSid = process.env.TWILIO_ACCOUNT_SID;\r\n        const authToken = process.env.TWILIO_AUTH_TOKEN;\r\n\r\n        console.log(\"CHECK _message: \",_message.content.text);\r\n\r\n        if (!accountSid || !authToken) {\r\n            console.error('TWILIO_ACCOUNT_SID or TWILIO_AUTH_TOKEN is not set');\r\n            return false;\r\n        }\r\n\r\n        // Extract the mobile number from the message\r\n        const mobileNumberRegex = /(?:\\+|00)(\\d{1,3})\\s?(\\d{3,5})\\s?(\\d{4,10})/; // This regex matches numbers like +1 123 4567890 or 001 123 4567890\r\n        const text = (_message.content as { text?: string })?.text || '';\r\n        const matches = text.match(mobileNumberRegex);\r\n\r\n        const messageRegex = /'([^']+)'/;\r\n        const messageMatch = text.match(messageRegex);\r\n\r\n        let mobileNumberProvidedByUser = null;\r\n        let messageToSendFromUser = 'Hi, from SoulSparks';\r\n\r\n        if(messageMatch){\r\n            messageToSendFromUser = messageMatch[1];\r\n        }\r\n        if (matches) {\r\n            // Combine the parts of the number into a single string, removing spaces and plus signs\r\n            mobileNumberProvidedByUser = `+${matches[1]}${matches[2]}${matches[3]}`;\r\n        }else{\r\n            const alternativeMobileNumberRegex = /\\b(\\d{3})[-.]?(\\d{3})[-.]?(\\d{4})\\b/; // For formats like 123-456-7890 or 123.456.7890\r\n            if (!mobileNumberProvidedByUser) {\r\n                const alternativeMatches = text.match(alternativeMobileNumberRegex);\r\n                if (alternativeMatches) {\r\n                    mobileNumberProvidedByUser = `${alternativeMatches[1]}${alternativeMatches[2]}${alternativeMatches[3]}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        //const mobileNumberProvidedByUser = process.env.TARGET_PHONE_NUMBER;\r\n        const twilioNumber = process.env.TWILIO_PHONE_NUMBER; // Your Twilio phone number\r\n\r\n        console.log('check target mobile number: ', mobileNumberProvidedByUser);\r\n        console.log('check messageToSendFromUser: ', messageToSendFromUser);\r\n        console.log('check twilioNumber: ', twilioNumber);\r\n\r\n        if (!mobileNumberProvidedByUser) {\r\n            console.error('Mobile number is missing');\r\n\r\n            _callback({\r\n                text: `Sorry there was an issue send sms, please try again later`,\r\n            });\r\n            return false;\r\n        }\r\n\r\n        if (!twilioNumber) {\r\n            console.error('Twilio phone number is missing');\r\n\r\n            _callback({\r\n                text: `Sorry there was an issue send sms, please try again later`,\r\n            });\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            // Initialize Twilio client\r\n            const client = twilio(accountSid, authToken);\r\n\r\n            // Send the SMS\r\n            const message= await client.messages.create({\r\n                body: messageToSendFromUser, // The message body\r\n                to: mobileNumberProvidedByUser, // The recipient's phone number\r\n                from: twilioNumber, // Your Twilio phone number\r\n            });\r\n\r\n            console.log(\"message body: \", message);\r\n\r\n            const messageFromAgent = `SMS sent successfully to ${mobileNumberProvidedByUser}`;\r\n\r\n            // Call the callback to notify the user\r\n            _callback({\r\n                text: messageFromAgent,\r\n            });\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Failed to send SMS:', error);\r\n            _callback({\r\n                text: `Failed to send SMS to ${mobileNumberProvidedByUser}`,\r\n            });\r\n            return false;\r\n        }\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: { text: \"please send my message via sms to target mobile number\" },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: { text: \"\", action: \"SEND_SMS\" },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;","export * from \"./helloWorld.ts\";\r\nexport * from \"./sendSms.ts\";\r\n","import { Plugin } from \"@elizaos/core\";\r\nimport { helloWorldAction } from \"./actions/helloWorld.ts\";\r\nimport { sendSmsAction } from \"./actions/sendSms.ts\";\r\nexport * as actions from \"./actions\";\r\n\r\nexport const twilioPlugin: Plugin = {\r\n    name: \"twilio\",\r\n    description: \"Agent twilio with basic actions and evaluators\",\r\n    actions: [\r\n        helloWorldAction,\r\n        sendSmsAction,\r\n    ]\r\n};\r\n"],"mappings":"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","names":[]}